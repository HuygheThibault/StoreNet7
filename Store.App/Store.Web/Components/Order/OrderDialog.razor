@using Store.Shared.Dto;

@if (_order != null)
{
    <div class="@(_order != null ? "open": "") uni-dialog--side">
        <div class="uni-dialog-header padding-1rem">
            <p class="title text-primary">Edit order</p>
            <p class="close" @onclick="() => OnResult.InvokeAsync(null)"><i class="fa-regular fa-circle-xmark"></i></p>
        </div>
        <EditForm Model="@_order" OnSubmit="@Submit" class="uni-dialog-content">
            <DataAnnotationsValidator />
            <div class="form">
                <label for="supplier" class="label">Supplier: </label>
                <InputSelect id="supplier" class="dropdown" @bind-Value="@_order.SupplierId">
                    @foreach (var supplier in Suppliers)
                    {
                        <option value="@supplier.Id">@supplier.Name</option>
                    }
                </InputSelect>
                <fieldset>
                    <legend class="text-primary">
                        Products
                    </legend>
                    <i class="fa-solid fa-add text-primary mrg-1" @onclick="() => AddOrderLine()" style="cursor: pointer"><span class="mrg-0">Add product</span></i>
                    @foreach (OrderLineDto orderLine in _order.OrderLines)
                    {
                        <fieldset class="mrg-1">
                            <label for="product" class="label">Product: </label>
                            <InputSelect id="product" class="dropdown" @bind-Value="@orderLine.ProductId">
                                @foreach (var product in Products)
                                {
                                    <option value="@product.Id">@product.Title</option>
                                }
                            </InputSelect>
                            <label for="quantity" class="label">Quantity: </label>
                            <InputNumber id="quantity" class="form-control input" @bind-Value="@orderLine.Quantity" placeholder="Quantity" />
                            <ValidationMessage class="error" For="@(() => orderLine.Quantity)" />

                            <label for="costPerItem" class="label">Cost per item: </label>
                            <InputNumber id="costPerItem" class="form-control input" @bind-Value="@orderLine.CostPerItem" />

                            <label for="cost" class="label">Cost: </label>
                            <span>@orderLine.Cost</span>
                        </fieldset>
                    }
                </fieldset>
                <label for="orderCost" class="label">Cost: </label>
                <span>@Order.Cost</span>
                @* <InputNumber id="orderCost" class="form-control input" @bind-Value="@_order.Cost" placeholder="Cost" /> *@
                <ValidationMessage class="error" For="@(() => _order.Cost)" />
                <label for="comments" class="label">comments: </label>
                <InputTextArea id="comments" class="form-control input" @bind-Value="@_order.Comments" placeholder="Comments" />
                <ValidationMessage class="error" For="@(() => _order.Comments)" />

                <label for="File" class="label">File: </label>
                <InputFile OnChange="OnInputFileChange" />
                <ValidationSummary />
            </div>
        </EditForm>
        <div class="uni-dialog-actions">
            @if (IsSaving)
            {
                <div class="loader"></div>
            }
            else
            {
                <button class="uni-dialog-actions__primary-action" type="submit" @onclick="() => Submit()">Submit</button>
                <button class="uni-dialog-actions__secondary-action" type="button" @onclick="() => OnResult.InvokeAsync(null)">Cancel</button>
            }

        </div>
    </div>
}